{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  companies: [],\n  loading: false\n};\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {\n    setCompanies: (state, action) => {\n      state.companies = action.payload;\n      state.loading = false;\n    },\n    setLoading: state => {\n      state.loading = true;\n    }\n  }\n});\nexport const {\n  setCompanies,\n  setLoading\n} = companiesSlice.actions;\nexport const fetchCompaniesByCountry = country => async dispatch => {\n  try {\n    dispatch(setLoading()); // Set loading state to true\n\n    const response = await axios.get(`https://fakerapi.it/api/v1/companies?_quantity=200&_seed=42069`);\n    const data = response.data.data;\n    const countryCompanies = data.reduce((acc, company) => {\n      const country = company.country;\n      acc[country] = [...(acc[country] || []), company];\n      return acc;\n    }, {});\n    const companies = countryCompanies[country] || [];\n    dispatch(setCompanies(companies));\n  } catch (error) {\n    console.log('Error fetching companies:', error);\n    dispatch(setLoading()); // Reset loading state to false in case of an error\n  }\n};\n\nexport const selectCompanies = state => state.companies.companies;\nexport const selectLoading = state => state.companies.loading;\nexport default companiesSlice.reducer;","map":{"version":3,"names":["createSlice","axios","initialState","companies","loading","companiesSlice","name","reducers","setCompanies","state","action","payload","setLoading","actions","fetchCompaniesByCountry","country","dispatch","response","get","data","countryCompanies","reduce","acc","company","error","console","log","selectCompanies","selectLoading","reducer"],"sources":["C:/Users/Nyldr/OneDrive/Documentos/GitHub/faker-companies/src/store/companiesSlice.jsx"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nconst initialState = {\n  companies: [],\n  loading: false,\n};\n\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {\n    setCompanies: (state, action) => {\n      state.companies = action.payload;\n      state.loading = false;\n    },\n    setLoading: (state) => {\n      state.loading = true;\n    },\n  },\n});\n\nexport const { setCompanies, setLoading } = companiesSlice.actions;\n\nexport const fetchCompaniesByCountry = (country) => async (dispatch) => {\n  try {\n    dispatch(setLoading()); // Set loading state to true\n\n    const response = await axios.get(`https://fakerapi.it/api/v1/companies?_quantity=200&_seed=42069`);\n    const data = response.data.data;\n\n    const countryCompanies = data.reduce((acc, company) => {\n      const country = company.country;\n      acc[country] = [...(acc[country] || []), company];\n      return acc;\n    }, {});\n\n    const companies = countryCompanies[country] || [];\n\n    dispatch(setCompanies(companies));\n  } catch (error) {\n    console.log('Error fetching companies:', error);\n    dispatch(setLoading()); // Reset loading state to false in case of an error\n  }\n};\n\nexport const selectCompanies = (state) => state.companies.companies;\nexport const selectLoading = (state) => state.companies.loading;\n\nexport default companiesSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,EAAE;EACbC,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGL,WAAW,CAAC;EACxCM,IAAI,EAAE,WAAW;EACjBJ,YAAY;EACZK,QAAQ,EAAE;IACRC,YAAY,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACN,SAAS,GAAGO,MAAM,CAACC,OAAO;MAChCF,KAAK,CAACL,OAAO,GAAG,KAAK;IACvB,CAAC;IACDQ,UAAU,EAAGH,KAAK,IAAK;MACrBA,KAAK,CAACL,OAAO,GAAG,IAAI;IACtB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEI,YAAY;EAAEI;AAAW,CAAC,GAAGP,cAAc,CAACQ,OAAO;AAElE,OAAO,MAAMC,uBAAuB,GAAIC,OAAO,IAAK,MAAOC,QAAQ,IAAK;EACtE,IAAI;IACFA,QAAQ,CAACJ,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;;IAExB,MAAMK,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAE,gEAA+D,CAAC;IAClG,MAAMC,IAAI,GAAGF,QAAQ,CAACE,IAAI,CAACA,IAAI;IAE/B,MAAMC,gBAAgB,GAAGD,IAAI,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAK;MACrD,MAAMR,OAAO,GAAGQ,OAAO,CAACR,OAAO;MAC/BO,GAAG,CAACP,OAAO,CAAC,GAAG,CAAC,IAAIO,GAAG,CAACP,OAAO,CAAC,IAAI,EAAE,CAAC,EAAEQ,OAAO,CAAC;MACjD,OAAOD,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;IAEN,MAAMnB,SAAS,GAAGiB,gBAAgB,CAACL,OAAO,CAAC,IAAI,EAAE;IAEjDC,QAAQ,CAACR,YAAY,CAACL,SAAS,CAAC,CAAC;EACnC,CAAC,CAAC,OAAOqB,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,KAAK,CAAC;IAC/CR,QAAQ,CAACJ,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1B;AACF,CAAC;;AAED,OAAO,MAAMe,eAAe,GAAIlB,KAAK,IAAKA,KAAK,CAACN,SAAS,CAACA,SAAS;AACnE,OAAO,MAAMyB,aAAa,GAAInB,KAAK,IAAKA,KAAK,CAACN,SAAS,CAACC,OAAO;AAE/D,eAAeC,cAAc,CAACwB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}