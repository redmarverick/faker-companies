{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  countries: [],\n  loading: false\n};\nexport const countriesSlice = createSlice({\n  name: 'countries',\n  initialState,\n  reducers: {\n    setCountries: (state, action) => {\n      state.countries = action.payload;\n      state.loading = false;\n    },\n    setLoading: state => {\n      state.loading = true;\n    }\n  }\n});\nexport const {\n  setCountries,\n  setLoading\n} = countriesSlice.actions;\nexport const fetchCountries = () => async dispatch => {\n  try {\n    dispatch(setLoading()); // Set loading state to true\n\n    const response = await axios.get(`https://fakerapi.it/api/v1/companies?_quantity=200&_seed=42069`);\n    const data = response.data.data;\n    const countryCounts = data.reduce((acc, company) => {\n      const country = company.country;\n      acc[country] = (acc[country] || 0) + 1;\n      return acc;\n    }, {});\n    const countries = Object.entries(countryCounts).map(_ref => {\n      let [name, companyCount] = _ref;\n      return {\n        name,\n        companyCount\n      };\n    });\n\n    // Sort the countries alphabetically by name\n    countries.sort((a, b) => a.name.localeCompare(b.name));\n    dispatch(setCountries(countries));\n  } catch (error) {\n    console.log('Error fetching countries:', error);\n    dispatch(setLoading()); // Reset loading state to false in case of an error\n  }\n};\n\nexport const selectCountries = state => state.countries.countries;\nexport const selectLoading = state => state.countries.loading;\nexport default countriesSlice.reducer;","map":{"version":3,"names":["createSlice","axios","initialState","countries","loading","countriesSlice","name","reducers","setCountries","state","action","payload","setLoading","actions","fetchCountries","dispatch","response","get","data","countryCounts","reduce","acc","company","country","Object","entries","map","_ref","companyCount","sort","a","b","localeCompare","error","console","log","selectCountries","selectLoading","reducer"],"sources":["C:/Users/Nyldr/OneDrive/Documentos/GitHub/faker-companies/src/store/countriesSlice.jsx"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nconst initialState = {\r\n  countries: [],\r\n  loading: false,\r\n};\r\n\r\nexport const countriesSlice = createSlice({\r\n  name: 'countries',\r\n  initialState,\r\n  reducers: {\r\n    setCountries: (state, action) => {\r\n      state.countries = action.payload;\r\n      state.loading = false;\r\n    },\r\n    setLoading: (state) => {\r\n      state.loading = true;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setCountries, setLoading } = countriesSlice.actions;\r\n\r\nexport const fetchCountries = () => async (dispatch) => {\r\n  try {\r\n    dispatch(setLoading()); // Set loading state to true\r\n\r\n    const response = await axios.get(`https://fakerapi.it/api/v1/companies?_quantity=200&_seed=42069`);\r\n    const data = response.data.data;\r\n\r\n    const countryCounts = data.reduce((acc, company) => {\r\n      const country = company.country;\r\n      acc[country] = (acc[country] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    const countries = Object.entries(countryCounts).map(([name, companyCount]) => ({\r\n      name,\r\n      companyCount,\r\n    }));\r\n\r\n    // Sort the countries alphabetically by name\r\n    countries.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n    dispatch(setCountries(countries));\r\n  } catch (error) {\r\n    console.log('Error fetching countries:', error);\r\n    dispatch(setLoading()); // Reset loading state to false in case of an error\r\n  }\r\n};\r\n\r\nexport const selectCountries = (state) => state.countries.countries;\r\nexport const selectLoading = (state) => state.countries.loading;\r\n\r\nexport default countriesSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,EAAE;EACbC,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGL,WAAW,CAAC;EACxCM,IAAI,EAAE,WAAW;EACjBJ,YAAY;EACZK,QAAQ,EAAE;IACRC,YAAY,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACN,SAAS,GAAGO,MAAM,CAACC,OAAO;MAChCF,KAAK,CAACL,OAAO,GAAG,KAAK;IACvB,CAAC;IACDQ,UAAU,EAAGH,KAAK,IAAK;MACrBA,KAAK,CAACL,OAAO,GAAG,IAAI;IACtB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEI,YAAY;EAAEI;AAAW,CAAC,GAAGP,cAAc,CAACQ,OAAO;AAElE,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EACtD,IAAI;IACFA,QAAQ,CAACH,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;;IAExB,MAAMI,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAE,gEAA+D,CAAC;IAClG,MAAMC,IAAI,GAAGF,QAAQ,CAACE,IAAI,CAACA,IAAI;IAE/B,MAAMC,aAAa,GAAGD,IAAI,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAK;MAClD,MAAMC,OAAO,GAAGD,OAAO,CAACC,OAAO;MAC/BF,GAAG,CAACE,OAAO,CAAC,GAAG,CAACF,GAAG,CAACE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;MACtC,OAAOF,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;IAEN,MAAMlB,SAAS,GAAGqB,MAAM,CAACC,OAAO,CAACN,aAAa,CAAC,CAACO,GAAG,CAACC,IAAA;MAAA,IAAC,CAACrB,IAAI,EAAEsB,YAAY,CAAC,GAAAD,IAAA;MAAA,OAAM;QAC7ErB,IAAI;QACJsB;MACF,CAAC;IAAA,CAAC,CAAC;;IAEH;IACAzB,SAAS,CAAC0B,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACxB,IAAI,CAAC0B,aAAa,CAACD,CAAC,CAACzB,IAAI,CAAC,CAAC;IAEtDS,QAAQ,CAACP,YAAY,CAACL,SAAS,CAAC,CAAC;EACnC,CAAC,CAAC,OAAO8B,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,KAAK,CAAC;IAC/ClB,QAAQ,CAACH,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1B;AACF,CAAC;;AAED,OAAO,MAAMwB,eAAe,GAAI3B,KAAK,IAAKA,KAAK,CAACN,SAAS,CAACA,SAAS;AACnE,OAAO,MAAMkC,aAAa,GAAI5B,KAAK,IAAKA,KAAK,CAACN,SAAS,CAACC,OAAO;AAE/D,eAAeC,cAAc,CAACiC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}