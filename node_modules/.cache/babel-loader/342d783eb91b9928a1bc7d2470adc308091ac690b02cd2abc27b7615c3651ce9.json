{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Nyldr/OneDrive/Documentos/GitHub/faker-companies/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _slicedToArray from\"C:/Users/Nyldr/OneDrive/Documentos/GitHub/faker-companies/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _asyncToGenerator from\"C:/Users/Nyldr/OneDrive/Documentos/GitHub/faker-companies/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{createSlice}from'@reduxjs/toolkit';import axios from'axios';var initialState={countries:[],loading:false};export var countriesSlice=createSlice({name:'countries',initialState:initialState,reducers:{setCountries:function setCountries(state,action){state.countries=action.payload;state.loading=false;},setLoading:function setLoading(state){state.loading=true;}}});var _countriesSlice$actio=countriesSlice.actions,setCountries=_countriesSlice$actio.setCountries,setLoading=_countriesSlice$actio.setLoading;export{setCountries,setLoading};export var fetchCountries=function fetchCountries(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(dispatch){var response,data,countryCounts,countries;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;dispatch(setLoading());// Set loading state to true\n_context.next=4;return axios.get(\"https://fakerapi.it/api/v1/companies?_quantity=200&_seed=42069\");case 4:response=_context.sent;data=response.data.data;countryCounts=data.reduce(function(acc,company){var country=company.country;acc[country]=(acc[country]||0)+1;return acc;},{});countries=Object.entries(countryCounts).map(function(_ref2){var _ref3=_slicedToArray(_ref2,2),name=_ref3[0],companyCount=_ref3[1];return{name:name,companyCount:companyCount};});// Sort the countries alphabetically by name\ncountries.sort(function(a,b){return a.name.localeCompare(b.name);});dispatch(setCountries(countries));_context.next=16;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);console.log('Error fetching countries:',_context.t0);dispatch(setLoading());// Reset loading state to false in case of an error\ncase 16:case\"end\":return _context.stop();}},_callee,null,[[0,12]]);}));return function(_x){return _ref.apply(this,arguments);};}();};export var selectCountries=function selectCountries(state){return state.countries.countries;};export var selectLoading=function selectLoading(state){return state.countries.loading;};export default countriesSlice.reducer;","map":{"version":3,"names":["createSlice","axios","initialState","countries","loading","countriesSlice","name","reducers","setCountries","state","action","payload","setLoading","_countriesSlice$actio","actions","fetchCountries","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dispatch","response","data","countryCounts","wrap","_callee$","_context","prev","next","get","sent","reduce","acc","company","country","Object","entries","map","_ref2","_ref3","_slicedToArray","companyCount","sort","a","b","localeCompare","t0","console","log","stop","_x","apply","arguments","selectCountries","selectLoading","reducer"],"sources":["C:/Users/Nyldr/OneDrive/Documentos/GitHub/faker-companies/src/store/countriesSlice.jsx"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nconst initialState = {\n  countries: [],\n  loading: false,\n};\n\nexport const countriesSlice = createSlice({\n  name: 'countries',\n  initialState,\n  reducers: {\n    setCountries: (state, action) => {\n      state.countries = action.payload;\n      state.loading = false;\n    },\n    setLoading: (state) => {\n      state.loading = true;\n    },\n  },\n});\n\nexport const { setCountries, setLoading } = countriesSlice.actions;\n\nexport const fetchCountries = () => async (dispatch) => {\n  try {\n    dispatch(setLoading()); // Set loading state to true\n\n    const response = await axios.get(\n      `https://fakerapi.it/api/v1/companies?_quantity=200&_seed=42069`\n    );\n    const data = response.data.data;\n\n    const countryCounts = data.reduce((acc, company) => {\n      const country = company.country;\n      acc[country] = (acc[country] || 0) + 1;\n      return acc;\n    }, {});\n\n    const countries = Object.entries(countryCounts).map(([name, companyCount]) => ({\n      name,\n      companyCount,\n    }));\n\n    // Sort the countries alphabetically by name\n    countries.sort((a, b) => a.name.localeCompare(b.name));\n\n    dispatch(setCountries(countries));\n  } catch (error) {\n    console.log('Error fetching countries:', error);\n    dispatch(setLoading()); // Reset loading state to false in case of an error\n  }\n};\n\nexport const selectCountries = (state) => state.countries.countries;\nexport const selectLoading = (state) => state.countries.loading;\n\nexport default countriesSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}